---
import type { Props } from '@astrojs/starlight/props'
import { AstroError } from 'astro/errors'
import Default from '@astrojs/starlight/components/Sidebar.astro'

// Remix of https://starlight-utils.pages.dev/utilities/multi-sidebar/

export type SidebarData = {
	starlightProps: Props
	labelEntry: Props['sidebar'][number]
}

const multiSidebarData: Array<SidebarData> = Astro.props.sidebar.map((entry) => {
	if (entry.type !== 'group') {
		throw new AstroError(
			`\`${entry.label}\` cannot be used with multi-sidebar.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
		)
	}

	return {
		starlightProps: { ...Astro.props, sidebar: [...entry.entries] },
		labelEntry: entry
	}
})
---

<multi-sidebar>
	{
		multiSidebarData.map(({ starlightProps, labelEntry }) => (
			<div data-starlight-multi-sidebar-label={labelEntry.label}>
				<Default {...starlightProps} />
			</div>
		))
	}
</multi-sidebar>

<script>
	class Sidebar extends HTMLElement {
		constructor() {
			super()
			console.log('multi-sidebar init')
			// An array of all the sidebar divs
			// the url location
			// toggle class hidden
			// observe url changes?
		}
	}
	customElements.define('multi-sidebar', Sidebar)
	// let location = ''
	// let current = ''

	// const toggleSidebars = () => {
	// 	if (lang != 'en') {
	// 		current = window.location.pathname.split('/')[2]
	// 		if (current == 'reference') {
	// 			current = window.location.pathname.split('/')[3]
	// 		}
	// 	} else {
	// 		current = window.location.pathname.split('/')[1]
	// 		if (current == 'reference') {
	// 			current = window.location.pathname.split('/')[2]
	// 		}
	// 	}
	// }

	// onMount(() => {
	// 	location = document.location.href
	// 	const observer = new MutationObserver((mutations) => {
	// 		if (location !== document.location.href) {
	// 			location = document.location.href
	// 			toggleSidebars()
	// 		}
	// 	})
	// 	observer.observe(document.body, { childList: true, subtree: true })
	// 	toggleSidebars()
	// 	return () => {
	// 		observer.disconnect()
	// 	}
	// })
</script>
